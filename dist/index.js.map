{
  "version": 3,
  "sources": ["../ctor/lib/main.js", "../ctor/lib/polyfill.js", "../ctor/lib/index.js", "../alloc-unsafe/lib/has_alloc_unsafe.js", "../alloc-unsafe/lib/main.js", "../alloc-unsafe/lib/polyfill.js", "../alloc-unsafe/lib/index.js", "../from-array/lib/has_from.js", "../from-array/lib/main.js", "../from-array/lib/polyfill.js", "../from-array/lib/index.js", "../from-arraybuffer/lib/node_version.js", "../from-arraybuffer/lib/has_from.js", "../from-arraybuffer/lib/main.js", "../from-arraybuffer/lib/polyfill.js", "../from-arraybuffer/lib/index.js", "../from-buffer/lib/has_from.js", "../from-buffer/lib/main.js", "../from-buffer/lib/polyfill.js", "../from-buffer/lib/index.js", "../from-string/lib/has_from.js", "../from-string/lib/main.js", "../from-string/lib/polyfill.js", "../from-string/lib/index.js", "../reviver/lib/main.js", "../reviver/lib/index.js", "../to-json/lib/main.js", "../to-json/lib/index.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = require( 'buffer' ).Buffer; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write (browser) polyfill\n\n// MAIN //\n\n/**\n* Buffer constructor.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = polyfill;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Buffer constructor.\n*\n* @module @stdlib/buffer/ctor\n*\n* @example\n* var ctor = require( '@stdlib/buffer/ctor' );\n*\n* var b = new ctor( [ 1, 2, 3, 4 ] );\n* // returns <Buffer>\n*/\n\n// MODULES //\n\nvar hasNodeBufferSupport = require( '@stdlib/assert/has-node-buffer-support' );\nvar main = require( './main.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar ctor;\nif ( hasNodeBufferSupport() ) {\n\tctor = main;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar Buffer = require( './../../ctor' );\n\n\n// MAIN //\n\nvar bool = isFunction( Buffer.allocUnsafe );\n\n\n// EXPORTS //\n\nmodule.exports = bool;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' );\nvar format = require( '@stdlib/string/format' );\nvar Buffer = require( './../../ctor' );\n\n\n// MAIN //\n\n/**\n* Allocates a buffer having a specified number of bytes.\n*\n* ## Notes\n*\n* -   The underlying memory of returned `Buffer` instances is not initialized. Memory contents are unknown and may contain sensitive data.\n* -   When the size is less than half the pool size (specified on the `Buffer` constructor), memory is allocated from the `Buffer` pool for faster allocation of new `Buffer` instances.\n*\n* @param {NonNegativeInteger} size - number of bytes to allocate\n* @throws {TypeError} must provide a nonnegative integer\n* @returns {Buffer} new `Buffer` instance\n*\n* @example\n* var buf = allocUnsafe( 10 );\n* // returns <Buffer>\n*/\nfunction allocUnsafe( size ) {\n\tif ( !isNonNegativeInteger( size ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a nonnegative integer. Value: `%s`.', size ) );\n\t}\n\treturn Buffer.allocUnsafe( size );\n}\n\n\n// EXPORTS //\n\nmodule.exports = allocUnsafe;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' );\nvar format = require( '@stdlib/string/format' );\nvar Buffer = require( './../../ctor' );\n\n\n// MAIN //\n\n/**\n* Allocates a buffer having a specified number of bytes.\n*\n* ## Notes\n*\n* -   The underlying memory of returned `Buffer` instances is not initialized. Memory contents are unknown and may contain sensitive data.\n* -   When the size is less than half the pool size (specified on the `Buffer` constructor), memory is allocated from the `Buffer` pool for faster allocation of new `Buffer` instances.\n*\n* @param {NonNegativeInteger} size - number of bytes to allocate\n* @throws {TypeError} must provide a nonnegative integer\n* @returns {Buffer} new `Buffer` instance\n*\n* @example\n* var buf = allocUnsafe( 10 );\n* // returns <Buffer>\n*/\nfunction allocUnsafe( size ) {\n\tif ( !isNonNegativeInteger( size ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a nonnegative integer. Value: `%s`.', size ) );\n\t}\n\treturn new Buffer( size );\n}\n\n\n// EXPORTS //\n\nmodule.exports = allocUnsafe;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Allocate a buffer having a specified number of bytes.\n*\n* @module @stdlib/buffer/alloc-unsafe\n*\n* @example\n* var allocUnsafe = require( '@stdlib/buffer/alloc-unsafe' );\n*\n* var buf = allocUnsafe( 10 );\n* // returns <Buffer>\n*/\n\n// MODULES //\n\nvar hasAllocUnsafe = require( './has_alloc_unsafe.js' );\nvar main = require( './main.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar allocUnsafe;\nif ( hasAllocUnsafe ) {\n\tallocUnsafe = main;\n} else {\n\tallocUnsafe = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = allocUnsafe;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar Buffer = require( './../../ctor' );\n\n\n// MAIN //\n\nvar bool = isFunction( Buffer.from );\n\n\n// EXPORTS //\n\nmodule.exports = bool;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isCollection = require( '@stdlib/assert/is-collection' );\nvar format = require( '@stdlib/string/format' );\nvar Buffer = require( './../../ctor' );\n\n\n// MAIN //\n\n/**\n* Allocates a buffer using an octet array.\n*\n* @param {Collection} arr - octet array\n* @throws {TypeError} must provide an array-like object\n* @returns {Buffer} new `Buffer` instance\n*\n* @example\n* var fromArray = require( '@stdlib/buffer/from-array' );\n*\n* var buf = fromArray( [ 1, 2, 3, 4 ] );\n* // returns <Buffer>\n*/\nfunction fromArray( arr ) {\n\tif ( !isCollection( arr ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an array-like object. Value: `%s`.', arr ) );\n\t}\n\treturn Buffer.from( arr );\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromArray;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isCollection = require( '@stdlib/assert/is-collection' );\nvar format = require( '@stdlib/string/format' );\nvar Buffer = require( './../../ctor' );\n\n\n// MAIN //\n\n/**\n* Allocates a buffer using an octet array.\n*\n* @param {Collection} arr - octet array\n* @throws {TypeError} must provide an array-like object\n* @returns {Buffer} new `Buffer` instance\n*\n* @example\n* var fromArray = require( '@stdlib/buffer/from-array' );\n*\n* var buf = fromArray( [ 1, 2, 3, 4 ] );\n* // returns <Buffer>\n*/\nfunction fromArray( arr ) {\n\tif ( !isCollection( arr ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an array-like object. Value: `%s`.', arr ) );\n\t}\n\treturn new Buffer( arr ); // eslint-disable-line no-buffer-constructor\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromArray;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Allocate a buffer using an octet array.\n*\n* @module @stdlib/buffer/from-array\n*\n* @example\n* var array2buffer = require( '@stdlib/buffer/from-array' );\n*\n* var buf = array2buffer( [ 1, 2, 3, 4 ] );\n* // returns <Buffer>\n*/\n\n// MODULES //\n\nvar hasFrom = require( './has_from.js' );\nvar main = require( './main.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar array2buffer;\nif ( hasFrom ) {\n\tarray2buffer = main;\n} else {\n\tarray2buffer = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = array2buffer;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar NODE_VERSION = require( '@stdlib/process/node-version' );\n\n\n// MAIN //\n\nvar MAJOR = ( NODE_VERSION ) ? parseInt( NODE_VERSION.split( '.' )[ 0 ], 10 ) : -1;\n\n\n// EXPORTS //\n\nmodule.exports = MAJOR;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar Buffer = require( './../../ctor' );\nvar version = require( './node_version.js' );\n\n\n// MAIN //\n\nvar bool = isFunction( Buffer.from ) && version >= 5;\n\n\n// EXPORTS //\n\nmodule.exports = bool;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isArrayBuffer = require( '@stdlib/assert/is-arraybuffer' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar Buffer = require( './../../ctor' );\nvar format = require( '@stdlib/string/format' );\nvar version = require( './node_version.js' );\n\n\n// MAIN //\n\n/**\n* Allocates a buffer from an `ArrayBuffer`.\n*\n* ## Notes\n*\n* The behavior of this function varies across Node.js versions due to changes in the underlying Node.js APIs:\n*\n* -   `<6.0.0`: if provided an empty ArrayBuffer, the function returns an empty Buffer which is **not** an ArrayBuffer view.\n* -   otherwise, the function returns a view of an ArrayBuffer without copying the underlying memory.\n*\n* @param {ArrayBuffer} buf - ArrayBuffer instance\n* @param {NonNegativeInteger} [byteOffset=0] - index specifying the location of the first buffer byte\n* @param {NonNegativeInteger} [length=buf.byteLength] - number of buffer bytes\n* @throws {TypeError} first argument must be an ArrayBuffer\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {RangeError} second argument must not exceed number of bytes in input ArrayBuffer\n* @throws {TypeError} last argument must be a nonnegative integer\n* @throws {RangeError} last argument must not exceed number of bytes in input ArrayBuffer\n* @returns {Buffer} new `Buffer` instance\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array/buffer' );\n* var ab = new ArrayBuffer( 10 );\n*\n* var buf = fromArrayBuffer( ab );\n* // returns <Buffer>\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array/buffer' );\n* var ab = new ArrayBuffer( 10 );\n*\n* var buf = fromArrayBuffer( ab, 2, 4 );\n* // returns <Buffer>\n*/\nfunction fromArrayBuffer( buf, byteOffset, length ) {\n\tvar offset;\n\tvar len;\n\tif ( !isArrayBuffer( buf ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ArrayBuffer. Value: `%s`.', buf ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isNonNegativeInteger( byteOffset ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%s`.', byteOffset ) );\n\t\t}\n\t\tif ( byteOffset > buf.byteLength ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Second argument must not exceed the number of bytes in the input ArrayBuffer. Value: `%s`.', byteOffset ) );\n\t\t}\n\t\toffset = byteOffset;\n\t\tif ( arguments.length > 2 ) {\n\t\t\tif ( !isNonNegativeInteger( length ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Last argument must be a nonnegative integer. Value: `%s`.', length ) );\n\t\t\t}\n\t\t\tif ( length > buf.byteLength ) {\n\t\t\t\tthrow new RangeError( format( 'invalid argument. Last argument must not exceed the number of bytes in the input ArrayBuffer. Value: `%s`.', length ) );\n\t\t\t}\n\t\t\tlen = length;\n\t\t} else {\n\t\t\tlen = buf.byteLength - offset;\n\t\t}\n\t} else {\n\t\toffset = 0;\n\t\tlen = buf.byteLength;\n\t}\n\t// Address Node v5.x where providing an empty ArrayBuffer throws an error:\n\tif ( len === 0 && version < 6 ) {\n\t\treturn Buffer.from( [] );\n\t}\n\treturn Buffer.from( buf, offset, len );\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromArrayBuffer;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isArrayBuffer = require( '@stdlib/assert/is-arraybuffer' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar Buffer = require( './../../ctor' );\nvar Uint8Array = require( '@stdlib/array/uint8' );\nvar fromArray = require( './../../from-array' );\nvar format = require( '@stdlib/string/format' );\nvar version = require( './node_version.js' );\n\n\n// MAIN //\n\n/**\n* Allocates a buffer from an `ArrayBuffer`.\n*\n* ## Notes\n*\n* The behavior of this function varies across Node.js versions due to changes in the underlying Node.js APIs:\n*\n* -   `<3.0.0`: the function copies ArrayBuffer bytes to a new Buffer instance.\n* -   `>=3.0.0`: if provided a byte offset, the function copies `ArrayBuffer` bytes to a new `Buffer` instance; otherwise, the function returns a view of an `ArrayBuffer` without copying the underlying memory.\n* -   `<6.0.0`: if provided an empty ArrayBuffer, the function returns an empty Buffer which is **not** an ArrayBuffer view.\n*\n* @param {ArrayBuffer} buf - ArrayBuffer instance\n* @param {NonNegativeInteger} [byteOffset=0] - index specifying the location of the first buffer byte\n* @param {NonNegativeInteger} [length=buf.byteLength] - number of buffer bytes\n* @throws {TypeError} first argument must be an ArrayBuffer\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {RangeError} second argument must not exceed number of bytes in input ArrayBuffer\n* @throws {TypeError} last argument must be a nonnegative integer\n* @throws {RangeError} last argument must not exceed number of bytes in input ArrayBuffer\n* @returns {Buffer} new `Buffer` instance\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array/buffer' );\n* var ab = new ArrayBuffer( 10 );\n*\n* var buf = fromArrayBuffer( ab );\n* // returns <Buffer>\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array/buffer' );\n* var ab = new ArrayBuffer( 10 );\n*\n* var buf = fromArrayBuffer( ab, 2, 4 );\n* // returns <Buffer>\n*/\nfunction fromArrayBuffer( buf, byteOffset, length ) {\n\tvar len;\n\tif ( !isArrayBuffer( buf ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ArrayBuffer. Value: `%s`.', buf ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isNonNegativeInteger( byteOffset ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%s`.', byteOffset ) );\n\t\t}\n\t\tif ( byteOffset > buf.byteLength ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Second argument must not exceed the number of bytes in the input ArrayBuffer. Value: `%s`.', byteOffset ) );\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\tif ( !isNonNegativeInteger( length ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Last argument must be a nonnegative integer. Value: `%s`.', length ) );\n\t\t\t}\n\t\t\tif ( length > buf.byteLength ) {\n\t\t\t\tthrow new RangeError( format( 'invalid argument. Last argument must not exceed the number of bytes in the input ArrayBuffer. Value: `%s`.', length ) );\n\t\t\t}\n\t\t\tlen = length;\n\t\t} else {\n\t\t\tlen = buf.byteLength - byteOffset;\n\t\t}\n\t\treturn fromArray( new Uint8Array( buf, byteOffset, len ) );\n\t}\n\tif ( version < 3 ) {\n\t\treturn fromArray( new Uint8Array( buf ) );\n\t}\n\t// Address Node <= v5.x where providing an empty ArrayBuffer throws an error:\n\tif ( buf.byteLength === 0 ) {\n\t\treturn new Buffer( [] );\n\t}\n\treturn new Buffer( buf );\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromArrayBuffer;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Allocate a buffer from an `ArrayBuffer`.\n*\n* @module @stdlib/buffer/from-arraybuffer\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array/buffer' );\n* var arraybuffer2buffer = require( '@stdlib/buffer/from-arraybuffer' );\n*\n* var ab = new ArrayBuffer( 10 );\n* var buf = arraybuffer2buffer( ab );\n* // returns <Buffer>\n*/\n\n// MODULES //\n\nvar hasFrom = require( './has_from.js' );\nvar main = require( './main.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar arraybuffer2buffer;\nif ( hasFrom ) {\n\tarraybuffer2buffer = main;\n} else {\n\tarraybuffer2buffer = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = arraybuffer2buffer;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar Buffer = require( './../../ctor' );\n\n\n// MAIN //\n\nvar bool = isFunction( Buffer.from );\n\n\n// EXPORTS //\n\nmodule.exports = bool;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isBuffer = require( '@stdlib/assert/is-buffer' );\nvar format = require( '@stdlib/string/format' );\nvar Buffer = require( './../../ctor' );\n\n\n// MAIN //\n\n/**\n* Copies buffer data to a new `Buffer` instance.\n*\n* @param {Buffer} buffer - buffer from which to copy\n* @throws {TypeError} must provide a `Buffer` instance\n* @returns {Buffer} new `Buffer` instance\n*\n* @example\n* var fromArray = require( '@stdlib/buffer/from-array' );\n*\n* var b1 = fromArray( [ 1, 2, 3, 4 ] );\n* // returns <Buffer>\n*\n* var b2 = fromBuffer( b1 );\n* // returns <Buffer>\n*/\nfunction fromBuffer( buffer ) {\n\tif ( !isBuffer( buffer ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a Buffer. Value: `%s`.', buffer ) );\n\t}\n\treturn Buffer.from( buffer );\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromBuffer;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isBuffer = require( '@stdlib/assert/is-buffer' );\nvar format = require( '@stdlib/string/format' );\nvar Buffer = require( './../../ctor' );\n\n\n// MAIN //\n\n/**\n* Copies buffer data to a new `Buffer` instance.\n*\n* @param {Buffer} buffer - buffer from which to copy\n* @throws {TypeError} must provide a `Buffer` instance\n* @returns {Buffer} new `Buffer` instance\n*\n* @example\n* var fromArray = require( '@stdlib/buffer/from-array' );\n*\n* var b1 = fromArray( [ 1, 2, 3, 4 ] );\n* // returns <Buffer>\n*\n* var b2 = fromBuffer( b1 );\n* // returns <Buffer>\n*/\nfunction fromBuffer( buffer ) {\n\tif ( !isBuffer( buffer ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a Buffer. Value: `%s`.', buffer ) );\n\t}\n\treturn new Buffer( buffer ); // eslint-disable-line no-buffer-constructor\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromBuffer;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Copy buffer data to a new `Buffer` instance.\n*\n* @module @stdlib/buffer/from-buffer\n*\n* @example\n* var fromArray = require( '@stdlib/buffer/from-array' );\n* var copyBuffer = require( '@stdlib/buffer/from-buffer' );\n*\n* var b1 = fromArray( [ 1, 2, 3, 4 ] );\n* // returns <Buffer>\n*\n* var b2 = copyBuffer( b1 );\n* // returns <Buffer>\n*/\n\n// MODULES //\n\nvar hasFrom = require( './has_from.js' );\nvar main = require( './main.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar copyBuffer;\nif ( hasFrom ) {\n\tcopyBuffer = main;\n} else {\n\tcopyBuffer = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = copyBuffer;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar Buffer = require( './../../ctor' );\n\n\n// MAIN //\n\nvar bool = isFunction( Buffer.from );\n\n\n// EXPORTS //\n\nmodule.exports = bool;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar Buffer = require( './../../ctor' );\n\n\n// MAIN //\n\n/**\n* Allocates a buffer containing a provided string.\n*\n* @param {string} str - input string\n* @param {string} [encoding=\"utf8\"] - character encoding\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be a string\n* @throws {TypeError} second argument must be a valid encoding\n* @returns {Buffer} new `Buffer` instance\n*\n* @example\n* var buf = fromString( 'beep boop' );\n* // returns <Buffer>\n*/\nfunction fromString( str, encoding ) {\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isString( encoding ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a string. Value: `%s`.', encoding ) );\n\t\t}\n\t\treturn Buffer.from( str, encoding );\n\t}\n\treturn Buffer.from( str, 'utf8' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromString;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar Buffer = require( './../../ctor' );\n\n\n// MAIN //\n\n/**\n* Allocates a buffer containing a provided string.\n*\n* @param {string} str - input string\n* @param {string} [encoding=\"utf8\"] - character encoding\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be a string\n* @throws {TypeError} second argument must be a valid encoding\n* @returns {Buffer} new `Buffer` instance\n*\n* @example\n* var buf = fromString( 'beep boop' );\n* // returns <Buffer>\n*/\nfunction fromString( str, encoding ) {\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isString( encoding ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a string. Value: `%s`.', encoding ) );\n\t\t}\n\t\treturn new Buffer( str, encoding ); // eslint-disable-line no-buffer-constructor\n\t}\n\treturn new Buffer( str, 'utf8' ); // eslint-disable-line no-buffer-constructor\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromString;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Allocate a buffer containing a provided string.\n*\n* @module @stdlib/buffer/from-string\n*\n* @example\n* var string2buffer = require( '@stdlib/buffer/from-string' );\n*\n* var buf = string2buffer( 'beep boop' );\n* // returns <Buffer>\n*/\n\n// MODULES //\n\nvar hasFrom = require( './has_from.js' );\nvar main = require( './main.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar string2buffer;\nif ( hasFrom ) {\n\tstring2buffer = main;\n} else {\n\tstring2buffer = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = string2buffer;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isArray = require( '@stdlib/assert/is-array' );\nvar array2buffer = require( './../../from-array' );\n\n\n// MAIN //\n\n/**\n* Revives a JSON-serialized `Buffer`.\n*\n* @param {string} key - key\n* @param {*} value - value\n* @returns {(*|Buffer)} value or Buffer\n*\n* @example\n* var parseJSON = require( '@stdlib/utils/parse-json' );\n*\n* var str = '{\"type\":\"Buffer\",\"data\":[5,3]}';\n*\n* var buf = parseJSON( str, reviver );\n* // returns <Buffer>[ 5, 3 ]\n*/\nfunction reviver( key, value ) {\n\tif (\n\t\tvalue &&\n\t\tvalue.type === 'Buffer' &&\n\t\tisArray( value.data )\n\t) {\n\t\treturn array2buffer( value.data );\n\t}\n\treturn value;\n}\n\n\n// EXPORTS //\n\nmodule.exports = reviver;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Revive a JSON-serialized `Buffer`.\n*\n* @module @stdlib/buffer/reviver\n*\n* @example\n* var parseJSON = require( '@stdlib/utils/parse-json' );\n* var reviveBuffer = require( '@stdlib/buffer/reviver' );\n*\n* var str = '{\"type\":\"Buffer\",\"data\":[5,3]}';\n*\n* var buf = parseJSON( str, reviveBuffer );\n* // returns <Buffer>[ 5, 3 ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isBuffer = require( '@stdlib/assert/is-buffer' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns a JSON representation of a `Buffer`.\n*\n* @param {Buffer} buffer - buffer to serialize\n* @throws {TypeError} first argument must be a `Buffer`\n* @returns {Object} JSON representation\n*\n* @example\n* var array2buffer = require( '@stdlib/buffer/from-array' );\n*\n* var buf = array2buffer( [ 1, 2 ] );\n* // returns <Buffer>\n*\n* var json = buffer2json( buf );\n* // returns { 'type': 'Buffer', 'data': [ 1, 2 ] }\n*/\nfunction buffer2json( buffer ) {\n\tvar out;\n\tvar i;\n\tif ( !isBuffer( buffer ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a Buffer. Value: `%s`.', buffer ) );\n\t}\n\tout = {};\n\tout.type = 'Buffer';\n\tout.data = [];\n\tfor ( i = 0; i < buffer.length; i++ ) {\n\t\tout.data.push( buffer[ i ] );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = buffer2json;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a JSON representation of a `Buffer`.\n*\n* @module @stdlib/buffer/to-json\n*\n* @example\n* var array2buffer = require( '@stdlib/buffer/from-array' );\n* var buffer2json = require( '@stdlib/buffer/to-json' );\n*\n* var buf = array2buffer( [ 1, 2 ] );\n* // returns <Buffer>\n*\n* var json = buffer2json( buf );\n* // returns { 'type': 'Buffer', 'data': [ 1, 2 ] }\n*/\n\n// MODULES //\n\nvar buffer2json = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = buffer2json;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name allocUnsafe\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/buffer/alloc-unsafe}\n*/\nsetReadOnly( ns, 'allocUnsafe', require( './../alloc-unsafe' ) );\n\n/**\n* @name Buffer\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/buffer/ctor}\n*/\nsetReadOnly( ns, 'Buffer', require( './../ctor' ) );\n\n/**\n* @name array2buffer\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/buffer/from-arraybuffer}\n*/\nsetReadOnly( ns, 'array2buffer', require( './../from-array' ) );\n\n/**\n* @name arraybuffer2buffer\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/buffer/from-arraybuffer}\n*/\nsetReadOnly( ns, 'arraybuffer2buffer', require( './../from-arraybuffer' ) );\n\n/**\n* @name copyBuffer\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/buffer/from-buffer}\n*/\nsetReadOnly( ns, 'copyBuffer', require( './../from-buffer' ) );\n\n/**\n* @name string2buffer\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/buffer/from-string}\n*/\nsetReadOnly( ns, 'string2buffer', require( './../from-string' ) );\n\n/**\n* @name reviveBuffer\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/buffer/reviver}\n*/\nsetReadOnly( ns, 'reviveBuffer', require( './../reviver' ) );\n\n/**\n* @name buffer2json\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/buffer/to-json}\n*/\nsetReadOnly( ns, 'buffer2json', require( './../to-json' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "ctor", "require_polyfill", "__commonJSMin", "exports", "module", "polyfill", "require_lib", "__commonJSMin", "exports", "module", "hasNodeBufferSupport", "main", "polyfill", "ctor", "require_has_alloc_unsafe", "__commonJSMin", "exports", "module", "isFunction", "Buffer", "bool", "require_main", "__commonJSMin", "exports", "module", "isNonNegativeInteger", "format", "Buffer", "allocUnsafe", "size", "require_polyfill", "__commonJSMin", "exports", "module", "isNonNegativeInteger", "format", "Buffer", "allocUnsafe", "size", "require_lib", "__commonJSMin", "exports", "module", "hasAllocUnsafe", "main", "polyfill", "allocUnsafe", "require_has_from", "__commonJSMin", "exports", "module", "isFunction", "Buffer", "bool", "require_main", "__commonJSMin", "exports", "module", "isCollection", "format", "Buffer", "fromArray", "arr", "require_polyfill", "__commonJSMin", "exports", "module", "isCollection", "format", "Buffer", "fromArray", "arr", "require_lib", "__commonJSMin", "exports", "module", "hasFrom", "main", "polyfill", "array2buffer", "require_node_version", "__commonJSMin", "exports", "module", "NODE_VERSION", "MAJOR", "require_has_from", "__commonJSMin", "exports", "module", "isFunction", "Buffer", "version", "bool", "require_main", "__commonJSMin", "exports", "module", "isArrayBuffer", "isNonNegativeInteger", "Buffer", "format", "version", "fromArrayBuffer", "buf", "byteOffset", "length", "offset", "len", "require_polyfill", "__commonJSMin", "exports", "module", "isArrayBuffer", "isNonNegativeInteger", "Buffer", "Uint8Array", "fromArray", "format", "version", "fromArrayBuffer", "buf", "byteOffset", "length", "len", "require_lib", "__commonJSMin", "exports", "module", "hasFrom", "main", "polyfill", "arraybuffer2buffer", "require_has_from", "__commonJSMin", "exports", "module", "isFunction", "Buffer", "bool", "require_main", "__commonJSMin", "exports", "module", "isBuffer", "format", "Buffer", "fromBuffer", "buffer", "require_polyfill", "__commonJSMin", "exports", "module", "isBuffer", "format", "Buffer", "fromBuffer", "buffer", "require_lib", "__commonJSMin", "exports", "module", "hasFrom", "main", "polyfill", "copyBuffer", "require_has_from", "__commonJSMin", "exports", "module", "isFunction", "Buffer", "bool", "require_main", "__commonJSMin", "exports", "module", "isString", "format", "Buffer", "fromString", "str", "encoding", "require_polyfill", "__commonJSMin", "exports", "module", "isString", "format", "Buffer", "fromString", "str", "encoding", "require_lib", "__commonJSMin", "exports", "module", "hasFrom", "main", "polyfill", "string2buffer", "require_main", "__commonJSMin", "exports", "module", "isArray", "array2buffer", "reviver", "key", "value", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "isBuffer", "format", "buffer2json", "buffer", "out", "i", "require_lib", "__commonJSMin", "exports", "module", "buffer2json", "setReadOnly", "ns"]
}
